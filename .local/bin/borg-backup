#!/bin/sh

if [[ -z "$BORG_REPO" || -z "$BORG_PASSCOMMAND" ]]; then
  echo "activate a borg backup config with bb_activate <config>"
  exit 1
fi

PREFIX=home-
ARCHIVE=$PREFIX$(date '+%Y-%m-%dT%H:%M:%S')

echo "Backing up to repo $BORG_REPO archive $ARCHIVE"

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$(date '+%Y-%m-%dT%H:%M:%S')" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"
borg create \
  --stats \
  --filter AME \
  --verbose \
  --list \
  --show-rc \
  --compression lz4 \
  --exclude-caches \
  --exclude 'home/lars/Downloads' \
  --exclude 'home/lars/Encfs' \
  --exclude 'home/lars/tmp' \
  --exclude 'home/lars/.mozilla' \
  --exclude 'home/lars/.var' \
  --exclude 'home/lars/.config/Code' \
  --exclude 'home/lars/.config/Code - OSS' \
  --exclude 'home/lars/.config/discord' \
  --exclude 'home/lars/.config/google-chrome' \
  --exclude 'home/lars/.config/Slack' \
  --exclude 'home/lars/.config/spotify' \
  --exclude 'home/lars/.config/unity3d' \
  --exclude 'home/lars/.local/share/nvim' \
  --exclude 'home/lars/.local/share/digikam' \
  --exclude '**/.cache' \
  --exclude '**/[Cc]ache' \
  --exclude '**/__pycache__' \
  --exclude '**/venv' \
  --exclude '**/target' \
  --exclude '**/._sync_*' \
  \
  ::$ARCHIVE \
  $HOME

exit $?

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune \
  --list \
  --glob-archives 'home-*' \
  --show-rc \
  --keep-daily 3 \
  --keep-weekly 3 \
  --keep-monthly 5

prune_exit=$?

# use highest exit code as global exit code
global_exit=$((backup_exit > prune_exit ? backup_exit : prune_exit))

if [ ${global_exit} -eq 0 ]; then
  info "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
  info "Backup and/or Prune finished with warnings"
else
  info "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
